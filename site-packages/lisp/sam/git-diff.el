(provide 'git-diff)
(eval-when-compile (require 'cl))


(defun git-fname (path)
  "Given a full file path, return the path relative to the .git directory."
  (let (git-fname)
    (catch 'found
      (while t
	(unless (string-match "\\(.*\\)/\\([^/]+\\)$" path)
	  (error "No git base found"))
	(if git-fname
	    (setq git-fname (concat (match-string 2 path) "/" git-fname))
	  (setq git-fname (match-string 2 path)))
	(setq path (match-string 1 path))
	(when (file-exists-p (concat path "/.git"))
	  (throw 'found git-fname))))))

(defun git-cat (&optional rev)
  "Perform a git cat on the current buffer into a temporary buffer.
If a prefix arg is specified, ask for the revision. Default is HEAD.
When called interactively, the name of the temporary buffer will be displayed."
  (interactive "P")
  (if rev
      (when (interactive-p)
	(setq rev (read-from-minibuffer "Revision: "))))
  (let* ((full-path (buffer-file-name))
	 (git-fname (git-fname full-path))
	 (fname (file-name-nondirectory full-path))
	 (buf (tmp-buffer-create fname nil 'timeout 'git))
	 (catname (concat rev ":" git-fname)))
    (save-current-buffer
      (set-buffer buf) ;; really for GNU Emacs
      (erase-buffer)
      (call-process "git" nil buf nil "show" catname)
      (set-buffer-modified-p nil)
      (when (interactive-p)
	(message "git cat to buffer %s" (buffer-name buf))))
    buf))

;;;###autoload
(defun git-diff (rev)
  "Perform a git diff against the current buffer using ediff.
With a prefix arg, ask for the revision. Otherwise defaults to HEAD."
  (interactive "P")
  (when (and (interactive-p) rev)
    (setq rev (read-from-minibuffer "Revision: ")))
  (let ((buf (git-cat rev)))
    (ediff-buffers (current-buffer) buf)))

;;;###autoload
(defalias 'git-ediff 'git-diff)

;;;###autoload
(defun git-tmp-cleanup ()
  "Cleanup all the tmp buffers created with `git-diff' or `git-cat'."
  (interactive)
  (tmp-buffer-reap 'git))
