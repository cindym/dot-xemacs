;;; my-sparse.el --- Call sparse on the current buffer with output to
;;;                  the compilation buffer.

;; Copyright (C) 2010 Sean MacLennan

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;; You can get sparse here:
;; https://sparse.wiki.kernel.org/index.php/Main_Page

(defvar my-sparse-args nil
  "*Args to pass to sparse")

(defvar my-sparse-prog "sparse"
  "*The sparse executable.")

(eval-when-compile (require 'cl))

(defmacro my-sparse-feature-cond (&rest clauses)
  "Test CLAUSES for feature at compile time.
Each clause is (FEATURE BODY...)."
  (dolist (x clauses)
    (let ((feature (car x))
	  (body (cdr x)))
      (when (or (eq feature t)
		(featurep feature))
	(return (cons 'progn body))))))

;; replace-in-string for emacs
(my-sparse-feature-cond
 (emacs
  (defun replace-in-string (str regexp newtext &optional literal)
    (while (string-match regexp str)
      (replace-match newtext nil literal str)))))

(defun my-sparse (&optional user-args)
  "Run sparse against the current buffer. Output goes to the
compilation buffer so that `next-error' will work."
  (interactive)
  (let ((cmd (concat my-sparse-prog " "
		     my-sparse-args " "
		     user-args " "
		     (buffer-file-name))))
    (save-some-buffers (not compilation-ask-about-save) nil)
    (my-sparse-feature-cond
     (emacs (compilation-start cmd))
     (xemacs (compile-internal cmd "No more errors")))))

;;;; The rest is kernel specific

(defvar my-sparse-linux-dir
  (file-chase-links (concat "/lib/modules/" (car (uname "-r")) "/build"))
  "*Kernel directory for `my-sparse-linux'. Defaults to the current
kernel in use.")

(defvar my-sparse-linux-arch "x86"
  "*Arch to use for `my-sparse-linux'.")

(defvar my-sparse-linux-arch-flags-list
  '(("x86" "-D__i386__")
    ;; Hardcoded for now. See arch/x86/Makefile for how to calculate these.
    ("x86" "-DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1")
    )
  "*List of list of arches and arch specific flags. There can be
multiple entries for an arch.")

(defvar my-sparse-linux-flags
  (concat "-D__linux__ -Dlinux -Dunix -D__unix__ "
	  "-D__STDC__ "
	  "-D__KERNEL__ "
	  "-nostdinc "
	  "-O2 "

	  "-Wbitwise -Wno-return-void -Wundef "
	  "-Wdeclaration-after-statement "

	  "-D\"KBUILD_STR(s)=#s\" "
	  "-D\"KBUILD_BASENAME=KBUILD_STR(setup)\" "
	  "-D\"KBUILD_MODNAME=KBUILD_STR(setup)\" ")
  "*Flags required for sparse under Linux. These should be generic.")

(defvar my-sparse-linux-isystem nil
  "*The compiler specific includes. It should be set
automagically. Set to nil if you change the arch and/or compiler.")

(defun my-sparse-linux (&optional user-args)
  "Run sparse against the current buffer using Linux kernel
args. Output goes to the compilation buffer so that `next-error' will
work."
  (interactive)
  (let (args)

    ;; Default the args
    (setq args  my-sparse-linux-flags)

    ;; Add any arch specific args
    (dolist (entry my-sparse-linux-arch-flags-list)
      (when (string= (car entry) my-sparse-linux-arch)
	(setq args (concat args " " (cadr entry) " "))))

    ;; Add the compiler specific includes
    (unless my-sparse-linux-isystem
      (let ((cc (getenv "CC"))
	    isystem)
	(unless cc (setq cc "cc"))
	(setq isystem (exec-to-string (concat cc " -print-file-name=include")))
	(setq my-sparse-linux-isystem (replace-in-string isystem "[\r\n]" ""))))
    (setq args (concat args "-isystem " my-sparse-linux-isystem " "))

    ;; Add the arch includes
    (setq args (concat args "-I" my-sparse-linux-dir "/arch/" my-sparse-linux-arch "/include "))

    ;; Add the generic includes
    (setq args (concat args "-I" my-sparse-linux-dir "/include "))

    ;; Add the configs generated from .config
    (setq args (concat args "-include " my-sparse-linux-dir "/include/generated/autoconf.h "))

    ;; Lastly, add any user args
    (when user-args
      (setq args (concat args " " user-args)))

    (my-sparse args)))

(provide 'my-sparse)
