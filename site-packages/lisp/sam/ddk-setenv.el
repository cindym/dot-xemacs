;;--------------------------------------------------------
;; DDK setenv.bat - based on 3790
;; This is a complete rewrite.
;; Copyright Sean MacLennan 2006

(defvar ddk-target-os 'Win2k
  "*Currently allowed targes are: WinXP, WinNET, and Win2K")

(defvar ddk-free t
  "*Default to checked build unless non-nil")

(defvar ddk-tmp (getenv "temp"))

;;;###autoload
(defun ddk-setenv (&optional free)
  "A stripped down version of the DDK setenv.bat.
With an argument, setup a free build. Defaults to a checked build."
  (interactive "P")

  (let ((basedir (getenv "DDKROOT"))
	(arch (getenv "PROCESSOR_ARCHITECTURE"))
	(path (getenv "PATH"))
	ddkspec)

    (unless basedir (error "DDKROOT must be set"))
    (setenv "BASEDIR" basedir)

    (unless arch
      (setq arch "x86")
      (setenv "PROCESSOR_ARCHITECTURE" arch))

    (cond
     ((eq ddk-target-os 'Win2K)
      (setq ddkspec "w2k")
      (setenv "W2K" "_w2k")
      (setenv "NT_TARGET_VERSION" "0x500")
      (setenv "WIN2K_DDKBUILD" "1")
      (setenv "COFFBASE_TXT_FILE" (concat basedir "\\bin\\w2k\\coffbase.txt")))
     ((eq ddk-target-os 'WinXP)
      (setq ddkspec "wxp")
      (setenv "NT_TARGET_VERSION" "0x501")
      (setenv "COFFBASE_TXT_FILE" (concat basedir "\\bin\\coffbase.txt")))
     ((eq ddk-target-os 'WinNET)
      (setq ddkspec "wnet")
      (setenv "NT_TARGET_VERSION" "0x502")
      (setenv "COFFBASE_TXT_FILE" (concat basedir "\\bin\\coffbase.txt")))
     (t (error "Invalid ddk-target-os %S" ddk-target-os)))


    (setenv "PROJECT_ROOT" (concat basedir "\\src"))
    (setenv "PREFAST_ROOT" (concat basedir "\\bin\\x86\\prefast"))

    (setq path (concat basedir "\\bin;"
		       basedir "\\bin\\x86\\prefast\\\scripts;"
		       path))

    (setenv "Lib" (concat basedir "\\lib"))
    (setenv "Include" (concat basedir "\\" ddkspec))
    (setenv "WPP_CONFIG_PATH" (concat basedir "\\bin\\wppconfig"))
    (setenv "NTMAKEENV" (concat basedir "\\bin"))
    (setenv "BUILD_MAKE_PROGRAM" "nmake.exe")
    (setenv "BUILD_DEFAULT" "-ei -nmake -i")
    (setenv "BUILD_MULTIPROCESSOR" "1")
    (setenv "NO_BINPLACE" "TRUE")
    (setenv "PUBLISH_CMD" "@echo Publish not available...")

    (setenv "tmp" ddk-tmp)

    (unless (string= arch "x86")
      (error "We currently only support x86"))
    (setenv "CPU" arch)

    (setq path (concat basedir "\\bin\\x86;" path))
    (setenv "BUILD_DEFAULT_TARGETS" "-386")
    (setenv "_BUILDARCH" arch)

    (if ddk-free
	(progn
	  (setenv "BUILD_ALT_DIR" (concat "fre_" ddkspec "_" arch))
	  (setenv "NTDBGFILES" "1")
	  (setenv "NTDEBUG" "ntsdnodbg")
	  (setenv "NTDEBUGTYPE" "windbg")
	  (setenv "MSC_OPTIMIZATION" "")
	  (setenv "DDKBUILDENV" "fre")
	  )
      (setenv "BUILD_ALT_DIR" (concat "chk_" ddkspec "_" arch))
      (setenv "NTDBGFILES" "1")
      (setenv "NTDEBUG" "ntsd")
      (setenv "NTDEBUGTYPE" "both")
      (setenv "MSC_OPTIMIZATION" "/Od /Oi")
      (setenv "DDKBUILDENV" "chk")
      )

    (unless (eq ddk-target-os 'WinNET)
      (when (string= arch "x86")
	(setenv "BUFFER_OVERFLOW_CHECKS" "1")))

    (setenv "NEW_CRTS" "1")

    (setenv "SDK_INC_PATH" (concat basedir "\\inc\\" ddkspec))
    (setenv "DDK_INC_PATH" (concat basedir "\\inc\\ddk\\" ddkspec))
    (setenv "WDM_INC_PATH" (concat basedir "\\inc\\ddk\\wdm\\" ddkspec))
    (setenv "CRT_INC_PATH" (concat basedir "\\inc\\crt"))
    (setenv "ATL_INC_PATH" (concat basedir "\\inc"))
    (setenv "MFC_INCLUDES" (concat basedir "\\inc\\mfc42"))
    (setenv "OAK_INC_PATH" (concat basedir "\\inc\\" ddkspec))
    (setenv "IFSKIT_INC_PATH" (concat basedir "\\inc\\ifs\\" ddkspec))
    (setenv "HALKIT_INC_PATH" (concat basedir "\\inc\\hal\\" ddkspec))
    (setenv "PROCESSOR_INC_PATH" (concat basedir "\\inc\\processor"))

    (setenv "DRIVER_INC_PATH" (concat basedir "\\inc\\ddk\\" ddkspec))

    (let ((lib-dest (concat basedir "\\lib\\" ddkspec)))
      (setenv "SDK_LIB_DEST" lib-dest)
      (setenv "DDK_LIB_DEST" lib-dest)
      (setenv "IFSKIT_LIB_DEST" lib-dest))

    (let ((lib-path (concat basedir "\\lib\\" ddkspec "\\*")))
      (setenv "SDK_LIB_PATH" lib-path)
      (setenv "DDK_LIB_PATH" lib-path)
      (setenv "CRT_LIB_PATH" lib-path)
      (setenv "HALKIT_LIB_PATH" lib-path)
      (setenv "PROCESSOR_LIB_PATH" lib-path)
      (setenv "IFSKIT_LIB_PATH" lib-path))

    ;; SAM Didn't we already set this???
    (setenv "COFFBASE_TXT_FILE" (concat basedir "\\bin\\coffbase.txt"))
    (setenv "LINK_LIB_IGNORE" "4198")

    ;; Skip for 64 or hal
    (setenv "_ML_" "/Zvc6")
    (setenv "_CL_" "/Ztmp")
    (setenv "_LINK_" "/Tmp")

    (setenv "USERNAME" "WinDDK")

    ;; SAM cd /d %BASEDIR%
    ;; SAM doskey /macrofile=%BASEDIR%\bin\generic.mac
    ;; SAM doskey /macrofile=%BASEDIR%\bin\ddktree.mac

    ;; Just do this once
    (setenv "PATH" path)
    ))

;;
;; To compile directories with source files or .mak files
;;
(defvar ds-configuration "Debug"
  "* Configuration to use for .mak files.")

(defvar ds-architecture "Win32"
  "* Architecture to use for .mak files.")

(defvar ds-config-alist nil
  "* SAM OUT OF DATE. Alist of directories and matching
configurations.  If a directory matches, the match is used to find the
.mak file.  Directories must end in `/'")

(defvar ds-build-program "build"
  "* Path to build program.")

(defvar ds-build-options nil
  "* Default build options.")

(defvar ds-compile-dir nil
  "* The directory to run the compile command from.")
(make-variable-buffer-local 'ds-compile-dir)

(defadvice compile (around ds-set-compile-dir activate)
  "Set the compile directory."
  (unless ds-compile-dir
    (setq ds-compile-dir default-directory))
  (let ((default-directory ds-compile-dir)) ad-do-it))

;;;###autoload
(defun ds-compile-command (&optional verbose)
"Set the compile command to use a .mak file produced by Developers Studio."
  (interactive "P")

  ;; First look in the alist.
  (let ((config (string-match-list default-directory ds-config-alist))
	project
	dir)
    (if config
	(progn
	  (if verbose (message "Matched>>> '%S'" config))
	  (setq dir (car config))
	  (setq project (car (cdr config))))
      (progn
	(setq dir default-directory)))

    (unless project
      (setq project (file-name-nondirectory (directory-file-name dir))))

    (if verbose (message "dir: %s project: %s" dir project))

    (cond
     ((file-exists-p (concat dir "sources"))
      ;; We have a build setup
      (setq compile-command (concat ds-build-program " " ds-build-options))
      (set (make-variable-buffer-local 'make-clean-command)
	   (concat ds-build-program "-c")))
     ((file-exists-p (concat dir "win32\\sources"))
      ;; We have a build setup in win32
      (setq compile-command (concat "build " ds-build-options))
      (set (make-variable-buffer-local 'make-clean-command)
	   (concat ds-build-program " -c"))
      (setq ds-compile-dir (concat dir "win32\\")))
     ((file-exists-p (concat dir project ".mak"))
      ;; We have a .mak file
      (if (string= dir default-directory)
	  (setq dir nil)
	(setq ds-compile-dir dir))
      (make-local-variable 'compile-command)
      (make-local-variable 'make-clean-command)
      (setq compile-command
	    (concat "nmake "
		    "\"CFG=" project " - " ds-architecture " "
		    ds-configuration "\""
		    " -f " dir project ".mak"))
      (setq make-clean-command (concat compile-command " clean all"))
      (if (interactive-p)
	  (message compile-command)))
     (verbose (message "No .mak file found")))))

(add-hook 'c-mode-common-hook 'ds-compile-command)
(remove-hook 'c-mode-common-hook 'my-compile-command)

(provide 'ddk-setenv)
