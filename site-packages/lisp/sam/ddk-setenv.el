;;; ddk-setenv - Stripped down version of DDK setenv.bat

;; Copyright (C) 1996-2001 Sean MacLennan
;; Revision:   1.1

;; Updated for w2k

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;--------------------------------------------------------
;; Environment variables PROCESSOR_ARCHITECTURE and BASEDIR must be set.
;; Defaults to checked build unless `free' is non-nil.
;;;###autoload
(defun ddk-setenv (&optional free)
  "A stripped down version of the DDK setenv.bat.
With an argument, setup a free build. Defaults to a checked build."
  (interactive "P")

  (let ((arch    (getenv "PROCESSOR_ARCHITECTURE"))	;; need
	(basedir (getenv "BASEDIR"))			;; need
	(cpu     (getenv "CPU")))

    (or basedir (error "BASEDIR must be set"))

    (setenv "NTMAKEENV"          (concat basedir "\\inc"))
    (setenv "BUILD_MAKE_PROGRAM" "nmake.exe")
    (setenv "BUILD_DEFAULT"      "-ei -nmake -i")

    (or (getenv "TMP") (setenv "TMP" "\\"))

    ;; Only x86 supported
    (unless (string= arch "x86")
      (error "Invalid PROCESSOR_ARCHITETURE %S" arch))

    (or cpu (setenv "Cpu" "i386"))
    (setenv "BUILD_DEFAULT_TARGETS" "-386")
    (setq ds-architecture "Win32")

    (setenv "_OBJ_DIR" "obj")
    (setenv "NEW_CRTS" "1")
    (or (getenv "_NTROOT") (setenv "_NTROOT" basedir))

    (if free
	;; free build
	(progn
	  (setenv "DDKBUILDENV" "free")
	  (setenv "C_DEFINES" "-D_IDWBUILD")
	  (setenv "NTDBGFILES" "1")
	  (setenv "NTDEBUG" "")
	  (setenv "NTDEBUGTYPE" "")
	  (setenv "MSC_OPTIMIZATION" "")
	  (if (interactive-p) (message "Free %s build." arch)))
      ;; default to checked build
      (progn
	(setenv "DDKBUILDENV" "checked")
	(setenv "C_DEFINES" "-D_IDWBUILD -DRDRDBG -DSRVDBG")
	(setenv "NTDBGFILES" "")
	(setenv "NTDEBUG" "ntsd")
	(setenv "NTDEBUGTYPE" "both")
	(setenv "MSC_OPTIMIZATION" "/Od /Oi")
	(if (interactive-p) (message "Checked %s build." arch))))
    ))

;;
;; To compile directories with .mak files
;;
(defvar ds-configuration "Debug"
  "* Default configuration to use for .mak files.")

(defvar ds-architecture "Win32"
  "* Architecture to use for .mak files.
`ddk-setenv' should choose a correct value.")

(defvar ds-config-alist nil
  "* Alist of directories and matching configurations.
If a directory matches, the match is used to find the .mak file.
Directories must end in `/'")

;;;###autoload
(defun ds-compile-command (&optional verbose)
"Set the compile command to use a .mak file produced by Developers Studio."
  (interactive "P")

  ;; First look in the alist.
  (let ((config (string-match-list default-directory ds-config-alist))
	project
	dir)
    (if config
	(progn
	  (if verbose (message "Matched>>> '%S'" config))
	  (setq dir (car config))
	  (setq config (cdr config)))
      (progn
	(setq dir default-directory)
	(setq config ds-configuration)))
    (if verbose (message "dir: %s config: %s" dir config))

    (setq project (file-name-nondirectory (directory-file-name dir)))

    (if (file-exists-p (concat dir project ".mak"))
	(progn
	  ;; We have a .mak file
	  (if (string= dir default-directory) (setq dir nil))
	  (make-local-variable 'compile-command)
	  (make-local-variable 'make-clean-command)
	  (setq compile-command
		(concat "nmake "
			"\"CFG=" project " - " ds-architecture " " config "\""
			" -f " dir project ".mak"))
	  (setq make-clean-command (concat compile-command " clean all"))
	  (if (interactive-p)
	      (message compile-command)))
      (if verbose (message "No .mak file found")))))

(add-hook 'c-mode-common-hook 'ds-compile-command t)

(provide 'ddk-setenv)
