;;; dir-diff.el --- Diff directories
;
; Copyright (C) 2007 Sean MacLennan
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2, or (at your option)
; any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GNU Emacs; see the file COPYING.  If not, write to the
; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
; Boston, MA 02111-1307, USA.

(defvar ddir-ignore-list '("." ".." ".svn")
  "* List of directories/files to ignore.")

(defvar ddir-no-cmp nil
  "* If non-nil, do not compare files.")

(defvar ddir-A-add-list nil
  "* Alist of (dir . file) to add to listA")

(defvar ddir-B-add-list nil
  "* Alist of (dir . file) to add to listB")


(defun ddir-diff (dirA dirB)
  (let* ((listA (ddir-first-file dirA (directory-files dirA) ddir-A-add-list))
	 (listB (ddir-first-file dirB (directory-files dirB) ddir-B-add-list))
	 fileA fileB subdirs)

    (while (and listA listB)
      (setq fileA (car listA))
      (setq fileB (car listB))

      (cond
       ((equal fileA fileB)
	(if (file-directory-p (concat dirA "/" fileA))
	    (setq subdirs (append subdirs (list fileA)))
	  (when (not (ddir-cmp (concat dirA "/" fileA) (concat dirB "/" fileB)))
	    (princ (format "+++ %s/%s\n" dirA fileA))))
	(setq listA (ddir-next-file listA)
	      listB (ddir-next-file listB)))

       ((string< fileA fileB)
	(princ (format "<-- %s/%s\n" dirA fileA))
	(setq listA (ddir-next-file listA)))

       (t
	(princ (format "--> %s/%s\n" dirB fileB))
	(setq listB (ddir-next-file listB)))
       ))

    ;; Do the leftovers
    (while listA
      (princ (format "<-- %s/%s\n" dirA (car listA)))
      (setq listA (ddir-next-file listA)))
    (while listB
      (princ (format "--> %s/%s\n" dirB (car listB)))
      (setq listB (ddir-next-file listB)))

    ;; And the subdirs
    (dolist (subdir subdirs)
      (ddir-diff (concat dirA "/" subdir) (concat dirB "/" subdir)))
  ))


;;;###autoload
(defun dir-diff (dirA dirB)
  (interactive "DDirA: \nDDirB: ")

  (with-output-to-temp-buffer "*dir-diff output*"
    (ddir-diff dirA dirB)))


;; Because of the add lists, some of the files may be "virtual".
;; We silently ignore them here.
(defun ddir-cmp (fileA fileB)
  (if ddir-no-cmp
      t
    (if (and (file-exists-p fileA) (file-exists-p fileB))
	(eq (call-process "cmp" nil nil nil fileA fileB) 0)
      t)))

(defun ddir-first-file (dir files add-list)
  (when add-list
    (dolist (entry add-list)
      (when (equal dir (car entry))
	(setq files (append files (cdr entry)))))
    (setq files (sort files 'string<)))

  (while (member (car files) ddir-ignore-list)
    (setq files (cdr files)))
  files)

(defun ddir-next-file (files)
  (while
      (progn
	(setq files (cdr files))
	(member (car files) ddir-ignore-list)))
    files)

(provide 'dir-diff)
