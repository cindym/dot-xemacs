;;; ppc-env.el --- Setup for PPC cross-compile
;; Copyright (C) 1997-2006 Sean MacLennan

(provide 'ppc-env)

(defvar eldk-home "/usr/src/eldk"
  "*Base directory for ELDK.")

(defvar ppc-kernel-dir nil
  "*Base dir for kernel source")

(defvar ppc-saved-env nil
  "Internal list of original values.")

(defun ppc-set ()
  (unless ppc-kernel-dir
    (setq ppc-kernel-dir (concat eldk-home "/ppc_4xxFP/usr/src/linux")))
  (doit "IPP" nil)
  (doit "PIKA_CFLAGS" "-DPIKA_DEVEL -fPIC")
  (doit "ARCH" "ppc")
  (doit "CROSS_COMPILE" "ppc_4xxFP-")
  (doit "CC" "ppc_4xxFP-gcc")
  (doit "CXX" "ppc_4xxFP-g++")
  (doit "PATH" (concat (getenv "PATH") ":" eldk-home "/usr/bin"))
  (doit "KERNELSRCDIR" ppc-kernel-dir)

  ;; For GP
  (doit "CROSS_DIR" (concat eldk-home "/ppc_4xxFP"))
  )

(defun ppc-restore ()
  (dolist (env ppc-saved-env)
    (setenv (nth 0 env) (nth 1 env)))
  (setq ppc-saved-env nil)
  )

;;;###autoload
(defun ppc-env (arg)
  (interactive "P")
  (if arg
      (if ppc-saved-env
	  (ppc-restore)
	(error "PPC was not set."))
    (if ppc-saved-env
	(error "Already set.")
      (ppc-set))
    ))

(defun doit (env val)
  ;; (message "setenv '%s' from '%s' to '%s'" env (getenv env) val)
  (let ((tmp (list (list env (getenv env)))))
    (setq ppc-saved-env (nconc ppc-saved-env tmp)))
  (setenv env val)
  )
