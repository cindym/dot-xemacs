;;; ppc-env.el --- Setup for PPC cross-compile
;; Copyright (C) 2007 Sean MacLennan

(provide 'ppc-env)

(defvar ppc-toolchain-dir nil
  "*Base directory for ELDK.")

(defvar ppc-kernel-dir nil
  "*Base dir for kernel source")

(defvar ppc-u-boot-dir nil
  "*Base dir for u-boot. Optional.")

(defvar ppc-cross-compile "ppc_4xxFP-"
  "*Cross compile prefix.")

(defvar ppc-saved-env nil
  "Internal list of original values.")

(defvar ppc-is-set nil)

(defvar ppc-arch "powerpc")

(add-minor-mode 'ppc-is-set " PPC")

(unless (fboundp 'my-expand-dir-name)
  (fset 'my-expand-dir-name 'expand-file-name))

;;;###autoload
(defun ppc-env ()
  (interactive)

  (unless ppc-toolchain-dir
    (error "ppc-toolchain-dir must be set"))
  (unless ppc-kernel-dir
    (error "ppc-kernel-dir must be set"))

  (if ppc-saved-env
      (ppc-restore)
    (ppc-set)))

;;;###autoload
(defun ppc-set-kernel-dir (dir)
  (interactive "DDir: ")
  (setq ppc-kernel-dir (my-expand-dir-name dir))
  (ppc-add-to-compile-dir-list ppc-kernel-dir)
  (when ppc-is-set
    ;; Don't use ppc-doit, we don't want to lose the orignal value
    (setenv "KERNELSRCDIR" ppc-kernel-dir)))

(defun ppc-set ()
  (ppc-doit "IPP" nil)
  (ppc-doit "PIKA_CFLAGS" "-DPIKA_DEVEL -fPIC")
  (ppc-doit "ARCH" ppc-arch)
  (ppc-doit "CROSS_COMPILE" ppc-cross-compile)
  (ppc-doit "CC" (concat ppc-cross-compile "gcc"))
  (ppc-doit "CXX" (concat ppc-cross-compile "g++"))
  (ppc-doit "AS" (concat ppc-cross-compile "as"))
  (ppc-doit "PATH" (concat (getenv "PATH") ":" ppc-toolchain-dir "/usr/bin"))
  (ppc-doit "KERNELSRCDIR" ppc-kernel-dir)

  ;; Add this kernel to the compile dir list if necessary.
  ;; You can never have too many kernels ;)
  (ppc-add-to-compile-dir-list ppc-kernel-dir)
  (ppc-add-to-compile-dir-list ppc-u-boot-dir)

  (setq ppc-is-set t)
  )

(defun ppc-restore ()
  (dolist (env ppc-saved-env)
    (setenv (nth 0 env) (nth 1 env)))
  (setq ppc-saved-env nil)

  (setq ppc-is-set nil)
  )

(defun ppc-add-to-compile-dir-list (dir)
  (when (boundp 'my-compile-dir-list)
    (setq my-compile-dir-list
	  (add-to-list 'my-compile-dir-list
		       (list dir nil 'linux-style)))))

(defun ppc-doit (env val)
  "Save the old value and set the new value."
  ;; (message "setenv '%s' from '%s' to '%s'" env (getenv env) val)
  (let ((tmp (list (list env (getenv env)))))
    (setq ppc-saved-env (nconc ppc-saved-env tmp)))
  (setenv env val)
  )
