;;; my-compile.el - compile command helpers

;; Copyright (C) 1996-2010 Sean MacLennan

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License version
;; 2 as published by the Free Software Foundation.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABIL`ITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

(defvar make-j (if (fboundp 'cpuinfo-num-processors)
		   (format "-j%d" (* (cpuinfo-num-processors) 2))
		 "-j2") ;; resonable default
  "* -Jn value to pass to makes.")

;; Needed for Emacs.
(eval-when-compile
  (require 'cl))

(defvar my-compile-dir-list
  (list
   ;; 2.4 kernels need bzImage and modules for drivers
   (list "/usr/src/linux-2.4[^/]*/" (concat make-j " bzImage modules") "linux")
   ;; 2.6 kernels just work
   (list "/usr/src/linux[^/]*/" make-j "linux")
   (list "/usr/src/git-2.6[^/]*/" make-j "linux")
   ;; emacs needs gnu
   (list ".*/[sx]?emacs[^/]*/src/" make-j "gnu")
   (list ".*/[sx]?emacs[^/]*/" make-j "gnu"))
  "*A list of directory matches used by `my-compile-command' to set
the compile command.

Each match is a list, only the first element is required:

  * The first element is a regexp for the directory.
  * The second element is an arg string to pass to make.
  * The third element is either a string which defines the style to
    use, or a lisp function to call. The lisp function will be passed
    the directory matched and the target as parameters.

Only the first match is used so order is important.")

(defun my-compile-command ()
  "Set the compile command for the current file.
Go through the 'my-compile-dir-list' looking for a match.
If we match, the second element is an optional target and the
third argument is an optional function to call. The optional
function will be called after the compile command is set."
  (interactive)
  (let (dir arg func-or-style matched)
    (loop for list in my-compile-dir-list until matched do
      (when (string-match (car list) default-directory)
	(setq matched t)
	(setq dir  (match-string 0 default-directory)
	      arg  (nth 1 list)
	      func-or-style (nth 2 list))
	;; (message "=> %s %s" dir) ;; SAM DBG
	(set (make-local-variable 'compile-command)
	     (concat "make -C " dir " " arg))
	(cond
	 ((stringp func-or-style) (c-set-style func-or-style))
	 ((fboundp func-or-style) (funcall func-or-style dir arg)))))))

;; Make sure we are *after* my-c-mode-common-hook
(add-hook 'c-mode-common-hook 'my-compile-command 'append)

(provide 'my-compile)
