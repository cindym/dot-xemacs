(provide 'svn)
(require 'compile)


(defvar svn-tmp-buf-list nil "List of tmp buffers created.")


(defun svn-tmp-buf (fname rev)
  "Create a unique tmp buffer."
  (let ((base (file-name-sans-extension fname))
	(ext (file-name-extension fname))
	bufname buf)
    (setq bufname (concat base "_" rev (if ext ".") ext)) ;; try simple case first
    (when (and (get-buffer bufname)
	       (not (member bufname svn-tmp-buf-list)))
      (do ((count 1 (1+ count))) ((not (get-buffer bufname)) t)
	(setq bufname (concat base "_" rev "-" (number-to-string count) (if ext ".") ext))))
    (setq svn-tmp-buf-list (add-to-list 'svn-tmp-buf-list bufname))
    (setq buf (get-buffer-create bufname))
    (let ((default-major-mode major-mode))
      (set-buffer-major-mode buf))
    buf))


(defun svn-cat (&optional rev)
  "Perform an svn cat -r rev on the current buffer into a temporary buffer.
If a prefix arg is specified, ask for the revision. Default is HEAD.
When called interactively, the name of the temporary buffer will be displayed."
  (interactive "P")
  (if rev
      (when (interactive-p)
	(setq rev (read-from-minibuffer "Revision: ")))
    (setq rev "HEAD"))
  (let* ((fname (file-name-nondirectory (buffer-file-name)))
	 (buf (svn-tmp-buf fname rev))
	 (catname (concat fname "@" rev)))
    (empty-buffer buf)
    (call-process "svn" nil buf nil "cat" catname)
    (set-buffer-modified-p nil buf)
    (when (interactive-p) (message "svn cat to buffer %s" (buffer-name buf)))
    buf))


;;;###autoload
(defun svn-diff (rev)
  "Perform an svn diff against the current buffer using ediff.
With a prefix arg, ask for the revision. Otherwise defaults to HEAD."
  (interactive "P")
  (when (and (interactive-p) rev)
    (setq rev (read-from-minibuffer "Revision: ")))
  (let ((buf (svn-cat rev)))
    (ediff-buffers (current-buffer) buf)))


;;;###autoload
(defalias 'svn-ediff 'svn-diff)


;;;###autoload
(defun svn-tmp-cleanup ()
  "Cleanup all the tmp buffers created with `svn-tmp-buf'."
  (interactive)
  (dolist (buf svn-tmp-buf-list)
    (if (get-buffer buf)
	(kill-buffer buf)
      (message "%S does not exist" buf)))
  (setq svn-tmp-buf-list nil))


(defun svn-cmd (cmd)
  (let* ((fname (file-name-nondirectory (buffer-file-name)))
	 (buff (get-buffer-create "*svn output*"))
	 (outwin (display-buffer buff)))
    (compilation-set-window-height outwin)
    (call-process "svn" nil buff t cmd fname)
    (revert-buffer nil t t)))


;;;###autoload
(defun svn-revert ()
  "Perform an svn revert on the current buffer."
  (interactive)
  (svn-cmd "revert"))

;;;###autoload
(defun svn-up ()
  "Perform an svn up on the current buffer."
  (interactive)
  (svn-cmd "up"))

;;;;; ---------------------------------------------------------------------------------

(when nil ;; SAM

(defvar svn-checksum nil)
(make-variable-buffer-local 'svn-checksum)

(defvar svn-modified nil)
(make-variable-buffer-local 'svn-modified)


(defun svn-tmp-buffer (name)
  (let ((buff (get-buffer-create (concat "*svn " name "*"))))
    (empty-buffer buff)
    buff))


(defun svn-status ()
  (interactive) ;; why not?
  (let ((fname (file-name-nondirectory (buffer-file-name)))
	(svn (concat (file-name-directory (buffer-file-name)) "/.svn"))
	(buff (svn-tmp-buffer "status")))
    (when (and (file-exists-p svn)
	       (eq (call-process "svn" nil buff nil "info" fname) 0)
	       (goto-char 1 buff)
	       (re-search-forward "Checksum: \\([0-9a-fA-F]+\\)" nil t nil buff))
      (setq svn-checksum
	    (buffer-substring (match-beginning 1) (match-end 1) buff))
      (svn-check-status))))

;; This mimics md5sum. Taken from pi-md5sum
(defun md5sum (buff)
  (with-temp-buffer
    (insert-file-contents-literally (buffer-file-name buff))
    (md5 (current-buffer))))


(defun svn-check-status ()
  (interactive) ;; why not?
  (when svn-checksum
    (let ((md5sum (md5sum (current-buffer))))
      (setq svn-modified (not (string= md5sum svn-checksum))))))


(add-minor-mode 'svn-checksum " svn")
(add-minor-mode 'svn-modified "+" nil 'svn-checksum)

(add-hook 'find-file-hooks 'svn-status)
(add-hook 'after-save-hook 'svn-check-status)
(add-hook 'after-revert-hook 'svn-status)

) ;; SAM