(provide 'svn)
(require 'compile)

(defun svn-cat (&optional rev)
  (interactive)
  (unless rev (setq rev "HEAD"))
  (let* ((fname (file-name-nondirectory (buffer-file-name)))
	 (ext (file-name-extension fname))
	 (bufname (concat
		   (file-name-sans-extension fname)
		   "_" rev
		   (if ext ".") ext))
	 (buf (get-buffer-create bufname))
	 (catname (concat fname "@" rev)))
    (empty-buffer buf)
    (call-process "svn" nil buf nil "cat" catname)
    (set-buffer-modified-p nil buf)
    (when (interactive-p) (message "svn cat to buffer %s" bufname))
    buf))


;;;###autoload
(defun svn-diff ()
  (interactive)
  (let ((buf (svn-cat)))
    (ediff-buffers (current-buffer) buf)))


;;;###autoload
(defalias 'svn-ediff 'svn-diff)


(defun svn-cmd (cmd)
  (let* ((fname (file-name-nondirectory (buffer-file-name)))
	 (buff (get-buffer-create "*svn output*"))
	 (outwin (display-buffer buff)))
    (compilation-set-window-height outwin)
    (call-process "svn" nil buff t cmd fname)
    (revert-buffer nil t t)
    ))


;;;###autoload
(defun svn-revert ()
  (interactive)
  (svn-cmd "revert"))

;;;###autoload
(defun svn-up ()
  (interactive)
  (svn-cmd "up"))

;;;;; ---------------------------------------------------------------------------------

(defvar svn-checksum nil)
(make-variable-buffer-local 'svn-checksum)

(defvar svn-modified nil)
(make-variable-buffer-local 'svn-modified)


(defun svn-tmp-buffer (name)
  (let ((buff (get-buffer-create (concat "*svn " name "*"))))
    (empty-buffer buff)
    buff))


(defun svn-status ()
  (interactive) ;; why not?
  (let ((fname (file-name-nondirectory (buffer-file-name)))
	(svn (concat (file-name-directory (buffer-file-name)) "/.svn"))
	(buff (svn-tmp-buffer "status")))
    (when (and (file-exists-p svn)
	       (eq (call-process "svn" nil buff nil "info" fname) 0)
	       (goto-char 1 buff)
	       (re-search-forward "Checksum: \\([0-9a-fA-F]+\\)" nil t nil buff))
      (setq svn-checksum
	    (buffer-substring (match-beginning 1) (match-end 1) buff))
      (svn-check-status))))

;; This mimics md5sum. Taken from pi-md5sum
(defun md5sum (buff)
  (with-temp-buffer
    (insert-file-contents-literally (buffer-file-name buff))
    (md5 (current-buffer))))


(defun svn-check-status ()
  (interactive) ;; why not?
  (when svn-checksum
    (let ((md5sum (md5sum (current-buffer))))
      (setq svn-modified (not (string= md5sum svn-checksum))))))


(add-minor-mode 'svn-checksum " svn")
(add-minor-mode 'svn-modified "+" nil 'svn-checksum)

(add-hook 'find-file-hooks 'svn-status)
(add-hook 'after-save-hook 'svn-check-status)
(add-hook 'after-revert-hook 'svn-status)
