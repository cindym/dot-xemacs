;;; font-lock-extras - add font-lock-comment-warn-face

;; Copyright (C) 1998-2000 Sean MacLennan
;; Revision:   1.0
;; last synced with XEmacs 21.2-b29

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.


(defvar font-lock-comment-warn-regexp nil
  "*String to match for the `font-lock-comment-warn-face'")
;;;###autoload
(make-variable-buffer-local 'font-lock-comment-warn-regexp)

;; Create the comment-warn face
(defface font-lock-comment-warn-face
  '((((class color))  (:foreground "red" :bold t :italic t))
    (((class grayscale) (background light))
     (:foreground "DimGray" :bold t :italic t))
    (((class grayscale) (background dark))
     (:foreground "LightGray" :bold t :italic t))
    (t (:bold t)))
  "Font Lock mode face used to highlight warning comments."
  :group 'font-lock-faces)

;; The only difference tween this and font-lock-default-fontify-region is
;; the call to my-font-lock-fontify-syntactically-region
(defun my-font-lock-fontify-region (beg end &optional loudly)
  (let ((modified (buffer-modified-p))
	(buffer-undo-list t) (inhibit-read-only t)
	(old-syntax-table (syntax-table))
	buffer-file-name buffer-file-truename)
    (unwind-protect
	(progn
	  ;; Use the fontification syntax table, if any.
	  (if font-lock-syntax-table (set-syntax-table font-lock-syntax-table))
	  ;; Now do the fontification.
	  (if font-lock-keywords-only
	      (font-lock-unfontify-region beg end)
	    (my-font-lock-fontify-syntactically-region beg end loudly))
	  (font-lock-fontify-keywords-region beg end loudly))
      ;; Clean up.
      (set-syntax-table old-syntax-table)
      (and (not modified) (buffer-modified-p) (set-buffer-modified-p nil)))))

;; The only difference tween this and font-lock-fontify-syntactically-region
;; is the comment code. (I also deleted the commented out block =)
(defun my-font-lock-fontify-syntactically-region (start end &optional loudly)
  "Put proper face on each string and comment between START and END.
START should be at the beginning of a line."
  (if font-lock-keywords-only
      nil
    (when (and font-lock-verbose
	       (>= (- end start) font-lock-message-threshold))
      (lmessage 'progress "Fontifying %s... (syntactically...)"
	(buffer-name)))
    (font-lock-unfontify-region start end loudly)
    (goto-char start)
    (if (> end (point-max)) (setq end (point-max)))
    (syntactically-sectionize
      #'(lambda (s e context depth)
	  (let (face)
	    (cond ((eq context 'string)
		   ;;#### Should only do this is Lisp-like modes!
		   (setq face
			 (if (= depth 1)
			     ;; really we should only use this if
			     ;;  in position 3 depth 1, but that's
			     ;;  too expensive to compute.
			     'font-lock-doc-string-face
			   'font-lock-string-face)))
		  ((or (eq context 'comment)
		       (eq context 'block-comment))
		   ;; SAM This is it!
		   (goto-char s)
		   (if (re-search-forward font-lock-comment-warn-regexp e t)
		       (setq face 'font-lock-comment-warn-face)
		     (setq face 'font-lock-comment-face))
		   ;; SAM That's all folks.
		   ))
	    (font-lock-set-face s e face)))
      start end)
    ))

(provide 'font-lock-extras)
