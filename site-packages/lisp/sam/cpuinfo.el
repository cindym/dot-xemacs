;;; cpuinfo.el --- simple interface to /proc/cpuinfo
;; Copyright (C) 2010 Sean MacLennan

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;; `cpuinfo-num-processors' works for Linux and Windows.
;; Actually, the Linux version will work on any system with
;; /proc/cpuinfo with processor: fields.

(defvar cpuinfo-bufname "*cpu-info*"
  "* Buffer name for cpuinfo-get.")

(defun cpuinfo-get ()
  "Read /proc/cpuinfo into `cpuinfo-bufname' buffer.
If the buffer already exists, do nothing."
  (when (not (get-buffer cpuinfo-bufname))
    (let ((buffer (get-buffer-create cpuinfo-bufname)))
      ;; insert-file-contents does not work on /proc
      (call-process "cat" nil buffer nil "/proc/cpuinfo")
      ))
  cpuinfo-bufname)

;;;###autoload
(defun cpuinfo-num-processors ()
  "Number of processors."
  (interactive)
  (let ((procs 0))
    (if (eq system-type 'windows-nt)
	(setq procs (string-to-number (getenv "NUMBER_OF_PROCESSORS")))
      (save-excursion
	(set-buffer (cpuinfo-get))
	(goto-char (point-min))
	(while (re-search-forward "^processor" nil t)
	  (setq procs (1+ procs)))))
    (if (eq procs 0) (setq procs 1)) ;; Paranoia
    (when (interactive-p)
      (message "Procs: %d" procs))
    procs))

;;;###autoload
(defun cpuinfo-num-cores ()
  "Count physical processor cores. Returns a list with three elements:
the number of cores, the number of processors, and a hypthreaded
flag."
  (interactive)
  (when (eq system-type 'windows-nt)
    (error "Not supported."))
  (save-excursion
    (set-buffer (cpuinfo-get))
    (let (phy cores (procs 0) hyper total)
      ;; Count the physical processors
      (goto-char (point-min))
      (while (re-search-forward "^physical id[ \t]+: \\([0-9]+\\)" nil t)
	(add-to-list 'phy (string-to-number (match-string 1))))
      (if phy
	  (setq phy (length phy))
	(setq phy 1))

      ;; Because Linux only allows SMP, we can just use the first
      ;; cpu cores entry.
      (goto-char (point-min))
      (if (re-search-forward "^cpu cores[ \t]+: \\([0-9]+\\)" nil t)
	  (setq cores (string-to-number (match-string 1)))
	(setq cores 1))

      ;; Count the possibly virtual processors
      (goto-char (point-min))
      (while (re-search-forward "^processor" nil t)
	(setq procs (1+ procs)))

      (setq total (* cores phy))
      (when (not (eq procs total))
	(if (eq procs (* total 2))
	    (setq hyper t)
	  (error "Bad number procs %d phy %d cores %d" procs phy cores)))

      (when (interactive-p)
	(message "Cores: %d Procs: %d%s" cores phy
		 (if hyper " hyperthreaded" "")))
      (list cores phy hyper))))
