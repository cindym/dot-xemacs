;;; cpuinfo.el --- simple interface to /proc/cpuinfo

;; Copyright (C) 2010 Sean MacLennan

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

(defvar cpuinfo-bufname "*cpu-info*"
  "* Buffer name for cpuinfo-get.")

(defun cpuinfo-get ()
  "Read /proc/cpuinfo into `cpuinfo-bufname' buffer.
If the buffer already exists, do nothing."
  (when (not (get-buffer cpuinfo-bufname))
    (let ((buffer (get-buffer-create cpuinfo-bufname)))
      ;; insert-file-contents does not work on /proc
      (call-process "cat" nil buffer nil "/proc/cpuinfo")
      ))
  cpuinfo-bufname)

;;;###autoload
(defun cpuinfo-num-processors ()
  "Simple version, just counts processor entries."
  (interactive)
  (save-excursion
    (set-buffer (cpuinfo-get))
    (goto-char (point-min))
    (let ((procs 0))
      (while (re-search-forward "^processor" nil t)
	(setq procs (1+ procs)))
      ;; Paranoia
      (if (eq procs 0) (setq procs 1))
      (when (interactive-p)
	(message "Procs: %d" procs))
      procs)))

;;;###autoload
(defun cpuinfo-num-cores ()
  "Count physical processor cores. Returns a list with two elements: the number of cores
and the number of processors."
  (interactive)
  (save-excursion
    (set-buffer (cpuinfo-get))
    (goto-char (point-min))
    (let ((procs 0) (cores 0) (last-core 9999) coreid)
	(while (re-search-forward "^core id[ \t]+: \\([0-9]+\\)" nil t)
	  (setq coreid (string-to-number (match-string 1)))
	  (setq procs (1+ procs))
	  (unless (eq coreid last-core)
	    (setq cores (1+ cores))
	    (setq last-core coreid)))
	;; Paranoia
	(if (eq procs 0) (setq procs 1))
	(if (eq cores 0) (setq cores 1))
	(when (interactive-p)
	  (message "Cores: %d Procs: %d" cores procs))
	(list cores procs))))
