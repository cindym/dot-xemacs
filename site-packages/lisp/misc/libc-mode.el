;;; libc-mode.el -- a minor mode mainly for Emacs' C mode.
;;;
;;; Copyright (C) 1993--1997 Ralph Schleicher
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License as
;;; published by the Free Software Foundation; either version 2 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;;;
;;; This file is not part of GNU Emacs.
;;;
;;; Author: Ralph Schleicher <rs@purple.UL.BaWue.DE>
;;; Maintainer: See the `Author' field
;;; Keywords: local c info
;;; Commentary: Add
;;;
;;;	(autoload 'libc-mode "libc-mode"
;;;	  "GNU C Library Info Explorer." t)
;;;
;;;	(autoload 'turn-on-libc-mode "libc-mode"
;;;	  "Unconditionally turn on Libc mode." t)
;;;
;;;	(autoload 'libc-describe-symbol "libc-mode"
;;;	  "Display the documentation of a C symbol." t)
;;;
;;;	(autoload 'libc-describe-function "libc-mode"
;;;	  "Display the documentation of a C function." t)
;;;
;;;	(autoload 'libc-describe-variable "libc-mode"
;;;	  "Display the documentation of a C variable." t)
;;;
;;;	(autoload 'libc-describe-type "libc-mode"
;;;	  "Display the documentation of a C data type." t)
;;;
;;;	(autoload 'libc-describe-file "libc-mode"
;;;	  "Display the documentation of a program or file." t)
;;;
;;; to the `site-start.el' file so that the user can turn on Libc mode
;;; with, for example,
;;;
;;;	(add-hook 'c-mode-hook 'turn-on-libc-mode)
;;;
;;; Code:


(require 'info)

(defvar libc-info-file-name "libc"
  "*Basename of the Info file of the GNU C Library Reference Manual.")

(defvar libc-highlight-face 'highlight
  "*Face for highlighting looked up symbol names;
`nil' disables highlighting.")

;;;###autoload
(defun libc-describe-symbol (symbol)
  "Display the documentation of a C symbol."
  (interactive (libc-symbol "symbol"))
  (libc-lookup-symbol symbol))

;;;###autoload
(defun libc-describe-function (function)
  "Display the documentation of a C function or function-like macro."
  (interactive (libc-symbol "function"))
  (libc-lookup-function function))

;;;###autoload
(defun libc-describe-variable (variable)
  "Display the documentation of a C variable or variable-like macro."
  (interactive (libc-symbol "variable"))
  (libc-lookup-variable variable))

;;;###autoload
(defun libc-describe-type (data-type)
  "Display the documentation of a C data type."
  (interactive (libc-symbol "data type"))
  (libc-lookup-type data-type))

;;;###autoload
(defun libc-describe-file (file-name)
  "Display the documentation of a program or file."
  (interactive (libc-symbol "file name"))
  (libc-lookup-file file-name))


(defvar libc-mode nil
  "Non-`nil' enables Libc mode.")

(make-variable-buffer-local 'libc-mode)

(defvar libc-mode-string " Libc"
  "Included in the mode line when in Libc mode.")

(or (assq 'libc-mode minor-mode-alist)
    (setq minor-mode-alist (append minor-mode-alist
				   (list '(libc-mode libc-mode-string)))))

(defvar libc-mode-map nil
  "Minor mode map for Libc mode.")

(if (null libc-mode-map)
    (setq libc-mode-map (make-sparse-keymap)))

(define-key libc-mode-map "\C-cs" 'libc-describe-symbol)
(define-key libc-mode-map "\C-cf" 'libc-describe-function)
(define-key libc-mode-map "\C-cv" 'libc-describe-variable)
(define-key libc-mode-map "\C-ct" 'libc-describe-type)
(define-key libc-mode-map "\C-cp" 'libc-describe-file)

;;;###autoload
(defun libc-mode (&optional arg)
  "GNU C Library Info Explorer.

Libc mode is a minor mode for looking up documentation of C symbols
in the GNU C Library Reference Manual.

Mode specific key bindings:
\\<libc-mode-map>
\\[libc-describe-symbol]		libc-describe-symbol
\\[libc-describe-function]		libc-describe-function
\\[libc-describe-variable]		libc-describe-variable
\\[libc-describe-type]		libc-describe-type
\\[libc-describe-file]		libc-describe-file

The default symbol is the one found before point.  The symbol's
documentation is usually displayed in another window."
  (interactive "P")
  (setq libc-mode (if (null arg)
		      (not libc-mode)
		    (> (prefix-numeric-value arg) 0)))
  (set-buffer-modified-p (buffer-modified-p)))

(or (assq 'libc-mode minor-mode-map-alist)
    (setq minor-mode-map-alist
	  (cons (cons 'libc-mode libc-mode-map) minor-mode-map-alist)))

;;;###autoload
(defun turn-on-libc-mode ()
  "Unconditionally turn on Libc mode."
  (libc-mode 1))


(defvar libc-symbol-history nil
  "History of C symbols.")

(defun libc-symbol (what)
  (let* ((enable-recursive-minibuffers t)
	 (symbol (libc-symbol-at-point))
	 (value (completing-read
		 (if symbol
		     (format "Describe %s (default %s): " what symbol)
		   (format "Describe %s: " what))
		 libc-symbol-history nil)))
    (list (if (equal value "") symbol value))))

(defun libc-symbol-at-point ()
  (condition-case ()
      (save-excursion
	(backward-sexp)
	(search-forward-regexp "[_A-Za-z][_0-9A-Za-z]*")
	(buffer-substring (match-beginning 0) (match-end 0)))
    (error nil)))

(defun libc-lookup-symbol (symbol)
  (libc-search (concat "^[ \\t]+- \\(Function\\|Variable\\|Macro\\|Data Type\\): .*"
		       "\\(\\b" (regexp-quote symbol) "\\b\\)") 2))

(defun libc-lookup-function (function)
  (libc-search-index "Function Index" function
		     "^[ \\t]+- \\(Function\\|Macro\\): .*\\(\\b" "\\b\\)" 2))

(defun libc-lookup-variable (variable)
  (libc-search-index "Variable Index" variable
		     "^[ \\t]+- \\(Variable\\|Macro\\): .*\\(\\b" "\\b\\)" 2))

(defun libc-lookup-type (data-type)
  (and (libc-search-index "Type Index" data-type
			  "^[ \\t]+- Data Type: \\(\\b" "\\b\\)" 1)
       (libc-search (concat "^[ \\t]+- Data Type: \\(\\(struct \\|union \\|enum \\)?"
			    "\\b" (regexp-quote data-type) "\\b\\)") 1)))

(defun libc-lookup-file (file-name)
  (libc-search-index "File Index" file-name))

(defun libc-search (regexp &optional match)
  (condition-case nil
      (save-selected-window
	(or (get-buffer "*info*")
	    (save-window-excursion
	      (info)))
	(switch-to-buffer-other-window "*info*")
	(Info-goto-node (concat "(" libc-info-file-name ")"))
	(let ((case-fold-search nil))
	  (Info-search regexp))
	(goto-char (point-min))
	(search-forward-regexp regexp)
	(and window-system libc-highlight-face
	     (let ((buffer-read-only nil))
	       (put-text-property
		(match-beginning (or match 0))
		(match-end (or match 0))
		'face libc-highlight-face)))
	(beginning-of-line))
    (error t)))

(defun libc-search-index (index item &optional prefix suffix match)
  (condition-case nil
      (save-selected-window
	(or (get-buffer "*info*")
	    (save-window-excursion
	      (info)))
	(switch-to-buffer-other-window "*info*")
	(Info-goto-node (concat "(" libc-info-file-name ")" index))
	(Info-menu item)
	(if (or prefix suffix)
	    (let ((case-fold-search nil))
	      (goto-char (point-min))
	      (search-forward-regexp
	       (concat prefix (regexp-quote item) suffix))
	      (and window-system libc-highlight-face
		   (let ((buffer-read-only nil))
		     (put-text-property
		      (match-beginning (or match 0))
		      (match-end (or match 0))
		      'face libc-highlight-face)))
	      (beginning-of-line))))
    (error t)))


(provide 'libc-mode)


;;; local variables:
;;; truncate-lines: t
;;; end:

;;; libc-mode.el end here
